# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Principale.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import cv2
from random import randint
from matplotlib import pyplot as plt
import numpy as np
import pygame
from PIL import Image
from filtrage import *
from Morphologie import *
from contour import *
from segmentation import *


class Ui_MainWindow(object):
    
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(994, 656)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icone.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("font: 75 9pt \"Arial\";")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("font: 75 9pt \"Arial\";\n"
"background-color: rgb(235, 235, 235);")
        self.centralwidget.setObjectName("centralwidget")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(460, 0, 31, 601))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(9)
        self.line.setFont(font)
        self.line.setStyleSheet("color: rgb(0, 0, 0);")
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_1.setGeometry(QtCore.QRect(170, 40, 141, 20))
        self.label_1.setObjectName("label_1")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(660, 40, 101, 21))
        self.label_2.setObjectName("label_2")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(0, 440, 981, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 520, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(9)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.Angle = QtWidgets.QTextEdit(self.centralwidget)
        self.Angle.setGeometry(QtCore.QRect(110, 520, 71, 31))
        self.Angle.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.Angle.setObjectName("Angle")
        self.im_rotation = QtWidgets.QPushButton(self.centralwidget)
        self.im_rotation.setGeometry(QtCore.QRect(230, 520, 93, 31))
        self.im_rotation.setStyleSheet("border-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"background-color: rgb(85, 255, 255);")
        self.im_rotation.setObjectName("im_rotation")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(500, 530, 111, 21))
        self.label_4.setObjectName("label_4")
        self.pourcentage = QtWidgets.QTextEdit(self.centralwidget)
        self.pourcentage.setGeometry(QtCore.QRect(620, 520, 61, 41))
        self.pourcentage.setStyleSheet("font: 75 9pt \"Arial\";\n"
"background-color: rgb(255, 255, 255);")
        self.pourcentage.setObjectName("pourcentage")
        self.im_redimension = QtWidgets.QPushButton(self.centralwidget)
        self.im_redimension.setGeometry(QtCore.QRect(720, 520, 121, 41))
        self.im_redimension.setStyleSheet("font: 75 9pt \"Arial\";\n"
"background-color: rgb(255, 170, 255);")
        self.im_redimension.setObjectName("im_redimension")
        self.affiche_image = QtWidgets.QLabel(self.centralwidget)
        self.affiche_image.setGeometry(QtCore.QRect(70, 130, 330, 251))
        self.affiche_image.setText("")
        self.affiche_image.setObjectName("affiche_image")
        self.image_resultat = QtWidgets.QLabel(self.centralwidget)
        self.image_resultat.setGeometry(QtCore.QRect(560, 130, 321, 251))
        self.image_resultat.setText("")
        self.image_resultat.setObjectName("image_resultat")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 994, 23))
        self.menubar.setObjectName("menubar")
        self.menuFichier = QtWidgets.QMenu(self.menubar)
        self.menuFichier.setStyleSheet("background-color: rgb(85, 170, 255);\n"
"color: rgb(0, 0, 0);\n"
"font: 75 9pt \"Arial\";")
        self.menuFichier.setObjectName("menuFichier")
        self.menuImage = QtWidgets.QMenu(self.menubar)
        self.menuImage.setStyleSheet("font: 75 9pt \"Arial\";\n"
"background-color: rgb(227, 255, 98);")
        self.menuImage.setObjectName("menuImage")
        self.menuBinarisation = QtWidgets.QMenu(self.menubar)
        self.menuBinarisation.setStyleSheet("font: 75 9pt \"Arial\";\n"
"background-color: rgb(170, 255, 127);")
        self.menuBinarisation.setObjectName("menuBinarisation")
        self.menuFiltrage = QtWidgets.QMenu(self.menubar)
        self.menuFiltrage.setStyleSheet("font: 75 9pt \"Arial\";\n"
"background-color: rgb(231, 172, 255);")
        self.menuFiltrage.setObjectName("menuFiltrage")
        self.menuGaussien = QtWidgets.QMenu(self.menuFiltrage)
        self.menuGaussien.setObjectName("menuGaussien")
        self.menuMoyenneur = QtWidgets.QMenu(self.menuFiltrage)
        self.menuMoyenneur.setObjectName("menuMoyenneur")
        self.menuMedian = QtWidgets.QMenu(self.menuFiltrage)
        self.menuMedian.setObjectName("menuMdian")
        self.menuContours = QtWidgets.QMenu(self.menubar)
        self.menuContours.setStyleSheet("font: 75 9pt \"Arial\";\n"
"background-color: rgb(208, 208, 208);")
        self.menuContours.setObjectName("menuContours")
        self.menuMorphologie = QtWidgets.QMenu(self.menubar)
        self.menuMorphologie.setStyleSheet("font: 75 9pt \"Arial\";\n"
"background-color: rgb(10, 157, 255);")
        self.menuMorphologie.setObjectName("menuMorphologie")
        self.menuSegmentation = QtWidgets.QMenu(self.menubar)
        self.menuSegmentation.setStyleSheet("font: 75 9pt \"Arial\";\n"
"background-color: rgb(255, 170, 127);")
        self.menuSegmentation.setObjectName("menuSegmentation")
        self.menuPoints_Interet = QtWidgets.QMenu(self.menubar)
        self.menuPoints_Interet.setStyleSheet("font: 75 9pt \"Arial\";\n"
"background-color: rgb(254, 208, 255);")
        self.menuPoints_Interet.setObjectName("menuPoints_Interet")
        self.menuExtraire_lignes = QtWidgets.QMenu(self.menubar)
        self.menuExtraire_lignes.setStyleSheet("font: 75 9pt \"Arial\";\n"
"background-color: rgb(255, 154, 12);")
        self.menuExtraire_lignes.setObjectName("menuExtraire_lignes")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOuvrir = QtWidgets.QAction(MainWindow)
        self.actionOuvrir.setObjectName("actionOuvrir")
        self.actionOuvrir.triggered.connect(self.getimage)
        self.actionImageNegative = QtWidgets.QAction(MainWindow)
        self.actionImageNegative.setObjectName("actionImageNegative")
        self.actionImageNegative.triggered.connect(self.im_negative)
        self.actionSelection = QtWidgets.QAction(MainWindow)
        self.actionSelection.setObjectName("actionSelection")
        self.actionHistogramme = QtWidgets.QAction(MainWindow)
        self.actionHistogramme.setObjectName("actionHistogramme")
        self.actionHistogramme.triggered.connect(self.histogramme)
        self.actionEgalisation = QtWidgets.QAction(MainWindow)
        self.actionEgalisation.setObjectName("actionEgalisation")
        self.actionEgalisation.triggered.connect(self.Egalisation)
        self.actionEtirement = QtWidgets.QAction(MainWindow)
        self.actionEtirement.setObjectName("actionEtirement")
        self.actionEtirement.triggered.connect(self.Etirement)
        self.actionSeuillage_manuel = QtWidgets.QAction(MainWindow)
        self.actionSeuillage_manuel.setObjectName("actionSeuillage_manuel")
        self.actionSeuillage_manuel.triggered.connect(self.Seuillage_manuel)
        self.actionAlgorithme_OTSU = QtWidgets.QAction(MainWindow)
        self.actionAlgorithme_OTSU.setObjectName("actionAlgorithme_OTSU")
        self.actionAlgorithme_OTSU.triggered.connect(self.OTSU)
        self.actionGradient = QtWidgets.QAction(MainWindow)
        self.actionGradient.setObjectName("actionGradient")
        self.actionGradient.triggered.connect(self.Gradient)
        self.actionSobel = QtWidgets.QAction(MainWindow)
        self.actionSobel.setObjectName("actionSobel")
        self.actionSobel.triggered.connect(self.Sobel)
        self.actionKirsch = QtWidgets.QAction(MainWindow)
        self.actionKirsch.setObjectName("actionKirsch")
        self.actionRobinson = QtWidgets.QAction(MainWindow)
        self.actionRobinson.setObjectName("actionRobinson")
        self.actionLaplacien = QtWidgets.QAction(MainWindow)
        self.actionLaplacien.setObjectName("actionLaplacien")
        self.actionLaplacien.triggered.connect(self.Laplacien)
        
        self.actionSigma_0_1 = QtWidgets.QAction(MainWindow)
        self.actionSigma_0_1.setObjectName("actionSigma_0_1")
        self.action3_3 = QtWidgets.QAction(MainWindow)
        self.action3_3.setObjectName("action3_3")
        self.action5_5 = QtWidgets.QAction(MainWindow)
        self.action5_5.setObjectName("action5_5")
        self.actionErosion = QtWidgets.QAction(MainWindow)
        self.actionErosion.setObjectName("actionErosion")
        self.actionErosion.triggered.connect(self.Erosion)
        self.actionDilatation = QtWidgets.QAction(MainWindow)
        self.actionDilatation.setObjectName("actionDilatation")
        self.actionDilatation.triggered.connect(self.Dilatation)
        self.actionOuverture = QtWidgets.QAction(MainWindow)
        self.actionOuverture.setObjectName("actionOuverture")
        self.actionOuverture.triggered.connect(self.Ouverture)
        self.actionFermeture = QtWidgets.QAction(MainWindow)
        self.actionFermeture.setObjectName("actionFermeture")
        self.actionFermeture.triggered.connect(self.Fermeture)
        self.actionCroissance_de_regions = QtWidgets.QAction(MainWindow)
        self.actionCroissance_de_regions.setObjectName("actionCroissance_de_regions")
        self.actionPartition_de_regions = QtWidgets.QAction(MainWindow)
        self.actionPartition_de_regions.setObjectName("actionPartition_de_regions")
        self.actionPartition_de_regions.triggered.connect(self.partition_Region)
        self.actionK_means = QtWidgets.QAction(MainWindow)
        self.actionK_means.setObjectName("actionK_means")
        self.actionK_means.triggered.connect(self.K_means)
        self.action_Sift = QtWidgets.QAction(MainWindow)
        self.action_Sift.setObjectName("action_Sift")
        self.action_Harris = QtWidgets.QAction(MainWindow)
        self.action_Harris.setObjectName("action_Harris")
        self.actionHough = QtWidgets.QAction(MainWindow)
        self.actionHough.setObjectName("actionHough")
        self.menuFichier.addAction(self.actionOuvrir)
        self.menuImage.addAction(self.actionImageNegative)
        self.menuImage.addAction(self.actionSelection)
        self.menuImage.addAction(self.actionHistogramme)
        self.menuImage.addAction(self.actionEgalisation)
        self.menuImage.addAction(self.actionEtirement)
        self.menuBinarisation.addAction(self.actionSeuillage_manuel)
        self.menuBinarisation.addAction(self.actionAlgorithme_OTSU)
        self.menuGaussien.addAction(self.actionSigma_0_1)
        self.menuMoyenneur.addAction(self.action3_3)
        self.menuMedian.addAction(self.action5_5)
        self.menuFiltrage.addAction(self.menuGaussien.menuAction())
        self.menuFiltrage.addAction(self.menuMoyenneur.menuAction())
        self.menuFiltrage.addAction(self.menuMedian.menuAction())
        self.menuContours.addAction(self.actionGradient)
        self.menuContours.addAction(self.actionSobel)
        self.menuContours.addAction(self.actionKirsch)
        self.menuContours.addAction(self.actionRobinson)
        self.menuContours.addAction(self.actionLaplacien)
        self.menuMorphologie.addAction(self.actionErosion)
        self.menuMorphologie.addAction(self.actionDilatation)
        self.menuMorphologie.addAction(self.actionOuverture)
        self.menuMorphologie.addAction(self.actionFermeture)
        self.menuSegmentation.addAction(self.actionCroissance_de_regions)
        self.menuSegmentation.addAction(self.actionPartition_de_regions)
        self.menuSegmentation.addAction(self.actionK_means)
        self.menuPoints_Interet.addAction(self.action_Sift)
        self.menuPoints_Interet.addAction(self.action_Harris)
        self.menuExtraire_lignes.addAction(self.actionHough)
        self.menubar.addAction(self.menuFichier.menuAction())
        self.menubar.addAction(self.menuImage.menuAction())
        self.menubar.addAction(self.menuBinarisation.menuAction())
        self.menubar.addAction(self.menuFiltrage.menuAction())
        self.menubar.addAction(self.menuContours.menuAction())
        self.menubar.addAction(self.menuMorphologie.menuAction())
        self.menubar.addAction(self.menuSegmentation.menuAction())
        self.menubar.addAction(self.menuPoints_Interet.menuAction())
        self.menubar.addAction(self.menuExtraire_lignes.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Belgacha Khaoula"))
        self.label_1.setText(_translate("MainWindow", "       Image choisie"))
        self.label_2.setText(_translate("MainWindow", "  Image Sortie"))
        self.label_3.setText(_translate("MainWindow", "  Angle :"))
        self.im_rotation.setText(_translate("MainWindow", "Pivoter"))
        self.im_rotation.clicked.connect(self.Rotation)
        self.label_4.setText(_translate("MainWindow", "  Pourcentage  :"))
        self.im_redimension.setText(_translate("MainWindow", "Redimensionner"))
        self.im_redimension.clicked.connect(self.redimension)
        self.menuFichier.setTitle(_translate("MainWindow", "Fichier"))
        self.menuImage.setTitle(_translate("MainWindow", "Image"))
        self.menuBinarisation.setTitle(_translate("MainWindow", "Binarisation"))
        self.menuFiltrage.setTitle(_translate("MainWindow", "Filtrage"))
        self.menuGaussien.setTitle(_translate("MainWindow", "Gaussien"))
        self.menuMoyenneur.setTitle(_translate("MainWindow", "Moyenneur"))
        self.menuMedian.setTitle(_translate("MainWindow", "Médian"))
        self.menuContours.setTitle(_translate("MainWindow", "Extraire Contours"))
        self.menuMorphologie.setTitle(_translate("MainWindow", "Morphologie"))
        self.menuSegmentation.setTitle(_translate("MainWindow", "Segmentation"))
        self.menuPoints_Interet.setTitle(_translate("MainWindow", "Points d\'intéret"))
        self.menuExtraire_lignes.setTitle(_translate("MainWindow", "Extraire lignes"))
        self.actionOuvrir.setText(_translate("MainWindow", "Ouvrir"))
        self.actionImageNegative.setText(_translate("MainWindow", "Image négative"))
        self.actionSelection.setText(_translate("MainWindow", "Sélectionner une zone"))
        self.actionSelection.triggered.connect(self.select)
        self.actionHistogramme.setText(_translate("MainWindow", "Histogramme"))
        self.actionEgalisation.setText(_translate("MainWindow", "Egalisation"))
        self.actionEtirement.setText(_translate("MainWindow", "Etirement"))
        self.actionSeuillage_manuel.setText(_translate("MainWindow", "Seuillage manuel"))
        self.actionAlgorithme_OTSU.setText(_translate("MainWindow", "Algorithme OTSU"))
        self.actionGradient.setText(_translate("MainWindow", "Gradient"))
        self.actionSobel.setText(_translate("MainWindow", "Sobel"))
        self.actionKirsch.setText(_translate("MainWindow", "Kirsch"))
        self.actionRobinson.setText(_translate("MainWindow", "Robinson"))
        self.actionLaplacien.setText(_translate("MainWindow", "Laplacien"))
        self.actionSigma_0_1.setText(_translate("MainWindow", "sigma = 0.1"))
        self.actionSigma_0_1.triggered.connect(self.Gaussian)
        self.action3_3.setText(_translate("MainWindow", "3*3"))
        self.action3_3.triggered.connect(self.Moyenneur)
        self.action5_5.setText(_translate("MainWindow", "5*5"))
        self.action5_5.triggered.connect(self.Median)
        self.actionErosion.setText(_translate("MainWindow", "Erosion"))
        self.actionDilatation.setText(_translate("MainWindow", "Dilatation"))
        self.actionOuverture.setText(_translate("MainWindow", "Ouverture"))
        self.actionFermeture.setText(_translate("MainWindow", "Fermeture"))
        self.actionCroissance_de_regions.setText(_translate("MainWindow", "Croissance de régions"))
        self.actionPartition_de_regions.setText(_translate("MainWindow", "Partition de régions"))
        self.actionK_means.setText(_translate("MainWindow", "Méthode des K-means"))
        self.action_Sift.setText(_translate("MainWindow", "Méthode Sift"))
        self.action_Harris.setText(_translate("MainWindow", "Méthode Harris"))
        self.actionHough.setText(_translate("MainWindow", "Hough"))
        
        
    ###-------------------------Récupérer Image----------------------------------###  
    
    def getimage(self):
        filename = QFileDialog.getOpenFileName()
        Ui_MainWindow.path = filename[0]
        pixmap = QtGui.QPixmap(Ui_MainWindow.path)
        print(Ui_MainWindow.path)
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.affiche_image.setPixmap(pixmap4)
   
        
    ###-------------------------Image Négative----------------------------------###
    
    def im_negative(self):
        image = cv2.imread(Ui_MainWindow.path)
        img = 255 - image
        random = randint(1,20)
        x="image_Negative"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png", img)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)
        
        
    ###-------------------------Sélection manuelle (par un rectangle) une zone dans une image ----------------------------------###    
    
    pygame.init()
    pygame.display.set_caption('Crop Image')
    pygame.mouse.set_cursor(*pygame.cursors.broken_x)    
    def displayImage( screen, px, topleft):
        screen.blit(px, px.get_rect())
        if topleft:
            pygame.draw.rect( screen, (255,0,0), pygame.Rect(topleft[0], topleft[1], pygame.mouse.get_pos()[0] - topleft[0], pygame.mouse.get_pos()[1] - topleft[1]),1)
        pygame.display.flip()

    def traitementRGB(x1, y1, x2, y2, px):
        print(x1, y1, x2, y2)
        crop = pygame.Surface((x2-x1, y2-y1))
        crop.blit(px, (0,0), (x1, y1, x2, y2))
        raw_str = pygame.image.tostring(crop, 'RGBA', False)
        image = Image.frombytes('RGBA', crop.get_size(), raw_str)
        image.show()
    
    def select(ch):
        px = pygame.image.load(ch)
        screen = pygame.display.set_mode( px.get_rect()[2:] )
        topleft = None
        boucle = True
        while boucle:
            for event in pygame.event.get():
                if event.type == pygame.MOUSEBUTTONUP and event.button == 1:
                    if not topleft:
                        topleft = event.pos
                    else:
                        x1, y1 = topleft
                        x2, y2 = event.pos
                        if x1 > x2:
                            x1, x2 = x2, x1
                        if y1 > y2:
                            y1, y2 = y2, y1
                        topleft = None
                        
                        #fonction rgb
                        traitementRGB(x1, y1, x2, y2, px)
                        
                #Bouton souris droite -> annuler selection
                if event.type == pygame.MOUSEBUTTONDOWN and event.button == 3:
                    topleft = None
                
                #bouton quiter fenetre
                if event.type == pygame.QUIT:
                    boucle = False
            #fonction affichage
            displayImage(screen, px, topleft)
            
    ###-----------------------------Histogramme de l'image----------------------------------###
    
    def histogramme(self):
        img = cv2.imread(Ui_MainWindow.path,0)
        hist, bins = np.histogram(img.flatten(), 256, [0, 256])
        cdf = hist.cumsum()
        cdf_normalized = cdf * hist.max() / cdf.max()  # this line not necessary.
        plt.plot(cdf_normalized, color='b')
        plt.hist(img.flatten(), 256, [0, 256], color='r')
        plt.xlim([0, 256])
        random = randint(1, 20)
        x = "Histogramme_" + str(random)
        plt.savefig("image_Sorties//" + x + ".png")
        pixmap = QtGui.QPixmap("image_Sorties//"+ x + ".png")
        pixmap4 = pixmap.scaled(380, 630, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)
         
    ###-----------------------------Egalisation de l'image----------------------------------###
    
    def Egalisation(self):
        img = cv2.imread(Ui_MainWindow.path, 0)
        equalise = cv2.equalizeHist(img)
        random = randint(1, 20)
        x = "image_Egalisation" + str(random)
        cv2.imwrite("image_Sorties//" + x + ".png", equalise)
        pixmap = QtGui.QPixmap("image_Sorties//" + x + ".png")
        pixmap4 = pixmap.scaled(380, 630, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)   
        
     ###-----------------------------Etirement de l'image----------------------------------### 
     
    def Etirement(self):
        M = cv2.imread(Ui_MainWindow.path)
        gray = cv2.cvtColor(M, cv2.COLOR_BGR2GRAY)
        MaxV = np.max(gray)
        MinV = np.min(gray)
        Y = np.zeros_like(gray)
        m = gray.shape
        for i in range(m[0]):
            for j in range(m[1]):
                Y[i, j] = (255 / (MaxV - MinV) * gray[i, j] - MinV)
        random = randint(1,20)
        x="image_Etire"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png",Y)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)
        
    ###-----------------------------Binarisation avec un seuillage manuel----------------------------------###    
        
    def Seuillage_manuel(self):
        
        image_init = cv2.imread(Ui_MainWindow.path)
        gray_image = cv2.cvtColor(image_init, cv2.COLOR_BGR2GRAY)
        largeur = int(gray_image.shape[0])
        hauteur = int(gray_image.shape[1])
        for i in range(1, largeur):
            for j in range(1, hauteur):
              if gray_image[i][j] <= 150:
                  gray_image[i][j] = 255
              else:
                  gray_image[i][j] = 0
        random = randint(1,20)
        x="image_binarise_manuel"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png",gray_image)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)


    ###-----------------------------Binarisation avec l'Algorithme d'OTSU----------------------------------###

    def OTSU(self):
        image_init = cv2.imread(Ui_MainWindow.path)
        gray = cv2.cvtColor(image_init, cv2.COLOR_BGR2GRAY)
        pixel_number = gray.shape[0] * gray.shape[1]
        mean_weigth = 1.0/pixel_number
        his, bins = np.histogram(gray, np.arange(0,257))
        final_thresh = -1
        final_value = -1
        intensity_arr = np.arange(256)
      
        for t in bins[1:-1]:
            pcb = np.sum(his[:t])
            pcf = np.sum(his[t:])
            Wb = pcb * mean_weigth
            Wf = pcf * mean_weigth
            mub = np.sum(intensity_arr[:t]*his[:t]) / float(pcb)
            muf = np.sum(intensity_arr[t:]*his[t:]) / float(pcf)
            np.seterr(divide='ignore', invalid='ignore')
            value =  Wb * Wf * (mub - muf) ** 2
            if value > final_value :
                final_thresh = t
                final_value = value   
        final_img = gray.copy()
        final_img[gray > final_thresh] = 255
        final_img[gray < final_thresh] = 0
        random = randint(1,20)
        x="image_binarise_Otsu"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png" , final_img)
        pixmap1 = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap5 = pixmap1.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap5)   
     
    ###-----------------------------Filtre Gaussien avec sigma = 0.1 ----------------------------------###
        
    def Gaussian(self):
        image = cv2.imread(Ui_MainWindow.path)
        f = Filtrage(image)
        img = f.Gaussien(0.1)
        height, width, byteValue = img.shape
        if byteValue == 3:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        random = randint(1,20)
        x="image_filtre_Gaussien"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png" , img)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)
    
    ###-----------------------------Filtre Moyenneur ( 3*3 ) ----------------------------------###
    
    def Moyenneur(self):
        image = cv2.imread(Ui_MainWindow.path)
        f = Filtrage(image)
        img = f.Moyenneur(3)
        height, width, byteValue = img.shape
        if byteValue == 3:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        random = randint(1,20)
        x="image_filtre_Moyenneur"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png" , img)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)  
     
        
    ###-----------------------------Filtre Median ( 5*5 ) ----------------------------------###
    
    def Median(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        if byteValue == 3:
            image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            f = Filtrage(image)
            img = f.Median(5)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            f = Filtrage(image)
            img = f.Median(5)
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        random = randint(1,20)
        x="image_filtre_Median"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png" , img)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)
        
    ###-----------------------------Extraire Contours avec : Gradient,Sobel,Laplacien ----------------------------------###
    
    def Gradient(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            c = Contours(imag)
            img = c.grad(20)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            c = Contours(image)
            img = c.grad(20)
            imag = QtGui.QImage(img.data, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        random = randint(1,20)
        x="image_Gradient"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png" , img)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)  
     
        
    def Sobel(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            c = Contours(imag)
            img = c.Sobel(50)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            c = Contours(image)
            img = c.Sobel(50)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)

        random = randint(1,20)
        x="image_Sobel"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png" , img)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)
        
        
    def Laplacien(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            c = Contours(imag)
            img = c.Laplacien(20)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            c = Contours(image)
            img = c.Laplacien(20)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        random = randint(1,20)
        x="image_Laplacien"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png" , img)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4) 
        
        
    ###---------------------------Erosion de l'image--------------------------------###
    def Erosion(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            m = Morphologie(imag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m.Erosion(h)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            m = Morphologie(image)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m.Erosion(h)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        random = randint(1,20)
        x="image_Erode"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png" , img)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)
    
    ###-----------------------------Dilatation de l'image----------------------------------###    
    
    def Dilatation(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            m = Morphologie(imag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m.dilatation(h)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            m = Morphologie(image)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m.dilatation(h)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        random = randint(1,20)
        x="image_Dilatee"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png" , img)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)

    ###-----------------------------Erosion de l'image suivie de sa Dilataion----------------------------------### 

    def Ouverture(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            m = Morphologie(imag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            imaag = m.Erosion(h)
            m1 = Morphologie(imaag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m1.dilatation(h)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            m = Morphologie(image)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            imaag = m.Erosion(h)
            m1 = Morphologie(imaag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m1.dilatation(h)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        random = randint(1,20)
        x="image_Ouverture"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png" , img)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)

    ###-----------------------------Dilataion de l'image suivie de son Erosion ----------------------------------###

    def Fermeture(self):
        image = cv2.imread(Ui_MainWindow.path)
        height, width, byteValue = image.shape
        if byteValue == 3:
            imag = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            m = Morphologie(imag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            imaag = m.dilatation(h)
            m1 = Morphologie(imaag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m1.Erosion(h)
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
            imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        else:
            m = Morphologie(image)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            imaag = m.dilatation(h)
            m1 = Morphologie(imaag)
            h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
            img = m1.Erosion(h)
            imag = QtGui.QImage(img, img.shape[1], img.shape[0], QtGui.QImage.Format_Grayscale8)
        random = randint(1,20)
        x="image_Fermeture"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png" , img)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)
        
        
    def partition_Region(self):
        image = cv2.imread(Ui_MainWindow.path)

        image.shape
        plt.imshow(image)
        gray = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        plt.imshow(gray, cmap='gray')
        gray.shape
        gray_r = gray.reshape(gray.shape[0] * gray.shape[1])
        for i in range(gray_r.shape[0]):
            if gray_r[i] > gray_r.mean():
                gray_r[i] = 1
            else:
                gray_r[i] = 0
        gray = gray_r.reshape(gray.shape[0], gray.shape[1])
        plt.imshow(gray, cmap='gray')
        gray = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        gray_r = gray.reshape(gray.shape[0] * gray.shape[1])
        for i in range(gray_r.shape[0]):
            if gray_r[i] > gray_r.mean():
                gray_r[i] = 3
            elif gray_r[i] > 0.5:
                gray_r[i] = 2
            elif gray_r[i] > 0.25:
                gray_r[i] = 1
            else:
                gray_r[i] = 0
        gray = gray_r.reshape(gray.shape[0], gray.shape[1])
        plt.imshow(gray, cmap='gray')
        
    ###-----------------------------Méthode de K_means----------------------------------###
        
    def K_means(self):
        image = cv2.imread(Ui_MainWindow.path)
        imag = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        height, width, byteValue = imag.shape
        s = Segmentation(imag)
        img = s.k_means()
        imag = QtGui.QImage(img, width, height, byteValue * width, QtGui.QImage.Format_RGB888)
        random = randint(1,20)
        x="image_Kmeans"+str(random)
        cv2.imwrite("image_Sorties//"+x+".png" , img)
        pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
        pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
        self.image_resultat.setPixmap(pixmap4)
        
    ###-----------------------------Rotation de l'image----------------------------------###
        
    def Rotation(self):
      anglevalue= int(self.Angle.toPlainText())
      image=cv2.imread(Ui_MainWindow.path)
      (h, w) = image.shape[:2]
      center = (w / 2, h / 2)
      M = cv2.getRotationMatrix2D(center,anglevalue,0.6)
      rotated = cv2.warpAffine(image, M, (h, w))
      random = randint(1,20)
      x="image_pivotee"+str(random)
      cv2.imwrite("image_Sorties//"+x+".png", rotated)
      pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
      pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
      self.image_resultat.setPixmap(pixmap4)
    
    ###-----------------------------Changer la dimension de l'image----------------------------------###  
    
    def redimension(self):
      pourcentage=int(self.pourcentage.toPlainText())
      image = cv2.imread(Ui_MainWindow.path)
      scale_percent = pourcentage
      width = int(image.shape[1] * scale_percent / 100)
      height = int(image.shape[0] * scale_percent / 100)
      dim = (width, height)
      resized = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)
      random = randint(1,20)
      x="image_redimensionnee"+str(random)
      cv2.imwrite("image_Sorties//"+x+".png", resized)
      pixmap = QtGui.QPixmap("image_Sorties//"+x+".png")
      pixmap4 = pixmap.scaled(300, 300, QtCore.Qt.KeepAspectRatio)
      self.image_resultat.setPixmap(pixmap4)   
      
      
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
